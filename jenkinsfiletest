properties([parameters([[$class: 'GitParameterDefinition', branch: '', branchFilter: 'master', defaultValue: '', description: 'Release to build', name: 'Version', quickFilterEnabled: false, selectedValue: 'NONE', sortMode: 'NONE', tagFilter: '*-r*', type: 'PT_TAG', useRepository: 'https://github.com/Bitnami/bitnami-docker-*']]), pipelineTriggers([])])
def GIT_URL = 'UNKNOWN'

pipeline {
    agent {label 'docker-slave'}
    options {
        skipDefaultCheckout()
        skipStagesAfterUnstable()
    }
    
    stages {
        stage('Checkout') {
         steps {
                script {            
                GIT_URL = scm.getUserRemoteConfigs()[0].getUrl()
                sh "echo ${GIT_URL}"
                }
                
                echo  "Retriving Version: ${params.Version} from ${GIT_URL}"
                checkout([$class: 'GitSCM', branches: [[name: "refs/tags/${params.Version}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${GIT_URL}"]]])                
        }
        }
        
        stage('Validate App') {
        steps{
           echo 'Bringing Application Up. This is the first step!'
           sh 'docker-compose up -d'
                
           echo 'Validating App is Up!' 
                sh """docker-compose ps -q | xargs docker inspect -f \'{{ .State.ExitCode }}\' | while read code; do
                    if [ "\$code" != "0" ]; 
                        then exit -1 
                    fi 
                    done
                    """     
            }
        }
        
        stage('Run Platform Specific Tests') {
            failFast true
            parallel {
                stage('Windows Testing') {
                    agent {
                        label "windows-testing"
                    }
                    steps {
                   //    checkout([$class: 'GitSCM', branches: [[name: "refs/tags/${params.Version}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${GIT_URL}"]]])                
                       sh 'docker-compose up -d'                
                       sh 'echo "Executing script to start Testing in Windows"'
                    }
                    post {
                        always {
                            sh 'docker-compose down'                
                        }
                    }
                }
                stage('Linux Testing') {
                    agent {
                        label "linux-testing"
                    }
                    steps {
                       checkout([$class: 'GitSCM', branches: [[name: "refs/tags/${params.Version}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${GIT_URL}"]]])                                       
                       sh 'docker-compose up -d'                
                       sh 'echo "Executing script to start Testing in Linux"'
                     }
                    post {
                        always {
                            sh 'docker-compose down'                
                        }
                    }
                }
            }
        }
    }
    post { 
        always { 
                sh 'docker-compose down'                
        }
    }
}
