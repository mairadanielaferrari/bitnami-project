properties([
    parameters([
        [
            $class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: '', 
            filterable: false, 
            name: 'Release', 
            randomName: 'choice-parameter-21337077649621572', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: '', 
                script: '''
                def getReleases = ("git ls-tree --name-only HEAD | grep -Eo '[0-9]{1,4}'").execute()
                return getReleases.text.readLines() '''                   
            ]
        ]
    ])
])

pipeline {
    agent {label 'docker-slave'}
    options {        
        skipStagesAfterUnstable()
    }
    
    stages {                
        stage('Validate App') {
        steps{
           script {
               echo 'Bringing Application Up. This is the first step!'
               
               if ("${params.Version}" != "latest")            
                  sh 'cd ${params.Version}'
               
               sh 'docker-compose up -d'
                
               echo 'Validating App is Up!' 
               
               sh """docker-compose ps -q | xargs docker inspect -f \'{{ .State.ExitCode }}\' | while read code; do
                  if [ "\$code" != "0" ]; 
                      then exit -1 
                  fi 
                  done
                  """     
            }
        }
        }
        stage('Run Platform Specific Tests') {
            parallel {
                stage('Windows Testing') {
                    agent {
                        label "windows-testing"
                    }
                    steps {                            
                       echo "Executing script to start Testing in Windows"
                    }
                    post {
                        always {
                             echo "Save Windows Testing Result"
                        }
                    }
                }
                stage('Linux Testing') {
                    agent {
                        label "linux-testing"
                    }
                    steps {                       
                       echo "Executing script to start Testing in Linux"
                     }
                    post {
                        always {
                             echo "Save Linux Testing Result"
                        }
                    }
                }
            }
        }
    }
    post { 
        always { 
                sh 'docker-compose down'                
        }
    }
}
